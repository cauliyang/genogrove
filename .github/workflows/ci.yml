name: ci
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # change when library is more stable
      matrix:
        #        os: [ubuntu-latest, windows-latest]
        os: [ubuntu-24.04, macos-14]
        build_type: [Debug, Release]
        #        c_compiler: [gcc, clang, cl]
        c_compiler: [gcc-12, gcc-13, gcc-14, clang-14]
        include:
          # ubuntu configurations
          - os: ubuntu-24.04
            c_compiler: gcc-12
            cpp_compiler: g++-12
          - os: ubuntu-24.04
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-24.04
            c_compiler: gcc-14
            cpp_compiler: g++-14
          - os: ubuntu-24.04
            c_compiler: clang-14
            cpp_compiler: clang++-14

          # macOS configurations
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++

          # windows configurations
          # - os: windows-2022
          # c_compiler: cl
          # cpp_compiler: cl

        exclude:
          # exlcude gcc on macos
          - os: macos-14
            c_compiler: gcc-12
          - os: macos-14
            c_compiler: gcc-13
          - os: macos-14
            c_compiler: gcc-14
          - os: macos-14
            c_compiler: clang-14

          # exclude gcc/clang on windows
#          - os: windows-2022
#            c_compiler: gcc-12
#          - os: windows-2022
#            c_compiler: gcc-13
#          - os: windows-2022
#            c_compiler: gcc-14
#          - os: windows-2022
#            c_compiler: clang-14

    steps:
      - name: checkout code
        uses: actions/checkout@v5

      # ✅ Only install compilers on Ubuntu
      - name: install gcc/clang on ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12 gcc-13 g++-13 gcc-14 g++-14 clang-14

      # ✅ Skip compiler installation on macOS — Clang is already available
#      - name: Confirm compiler versions
#        run: |
#          echo "C compiler: ${{ matrix.c_compiler }}"
#          echo "C++ compiler: ${{ matrix.cpp_compiler }}"
#          ${{ matrix.c_compiler }} --version
#          ${{ matrix.cpp_compiler }} --version

      - name: set reusable variables
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

      # configure cmake on linux
      - name: configure cmake (Linux)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_TESTING=ON \
          -S ${{ github.workspace }}

      # configure cmake on windows
#      - name: configure cmake (windows)
#        if: startsWith(matrix.os, 'windows')
#        run: |
#          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
#          -G "Visual Studio 17 2022" -A x64 \
#          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
#          -DBUILD_TESTING=ON \
#          -S ${{ github.workspace }}
          
      - name: build genogrove
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel
          
#      - name: Debug - Check test configuration
#        working-directory: ${{ steps.strings.outputs.build-output-dir }}
#        run: |
#          echo "=== Build directory contents ==="
#          ls -la
#          echo ""
#          echo "=== Looking for CTestTestfile.cmake ==="
#          find . -name "CTestTestfile.cmake" -exec cat {} \;
#          echo ""
#          echo "=== Looking for test executables ==="
#          find . -type f -executable -name "*test*" | head -20
#          echo ""
#          echo "=== CMakeCache.txt BUILD_TESTING ==="
#          grep BUILD_TESTING CMakeCache.txt || echo "BUILD_TESTING not found in cache"
#          echo ""
#          echo "=== Running ctest in debug mode ==="
#          ctest -N

      - name: run tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --output-on-failure
